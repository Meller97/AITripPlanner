import Head from "next/head";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import { useState } from "react";
import axios from "axios";

const inter = Inter({ subsets: ["latin"] });

interface FlightData {
  departure_airport: {
    name: string;
    id: string;
    time: string;
  };
  arrival_airport: {
    name: string;
    id: string;
    time: string;
  };
  duration: number;
  airline: string;
  airline_logo: string;
  travel_class: string;
  flight_number: string;
  legroom: string;
  extensions: string[];
  airplane?: string;
  ticket_also_sold_by?: string[];
  often_delayed_by_over_30_min?: boolean;
  overnight?: boolean;
}

interface HotelData {
  name: string;
  description: string;
  address: {
    latitude: number;
    longitude: number;
  };
  rating: number;
  price: number;
  check_in_time: string;
  check_out_time: string;
  amenities: string[];
  link: string;
}

interface DestinationInfo {
  "departures flight"?: FlightData[];
  "arrival flight"?: FlightData[];
  flights_coast: number;
  hotel: HotelData;
  hotel_coast: number;
  "total coast": number;
}

interface DestinationOption {
  name: string;
  info: DestinationInfo;
}

export default function Home() {
  const today = new Date().toISOString().split('T')[0];  // Get today's date in YYYY-MM-DD format

  const [formData, setFormData] = useState({
    startDate: "",
    endDate: "",
    budget: "",
    tripType: ""
  });

  const [plan, setPlan] = useState<string>('');
  const [images, setImages] = useState<string[]>([]);
  const [topOptions, setTopOptions] = useState<DestinationOption[]>([]);
  const [selectedDestination, setSelectedDestination] = useState("");
  const [planAndImages, setPlanAndImages] = useState<any>(null);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      // Fetch top 5 destination options
      const topOptionsResponse = await axios.get("http://localhost:8000/top-5-options", {
        params: {
          start_date: formData.startDate,
          end_date: formData.endDate,
          budget: formData.budget,
          trip_type: formData.tripType
        }
      });

      const destinationsData = topOptionsResponse.data;
      const formattedOptions = Object.keys(destinationsData).map((dest) => ({
        name: dest,
        info: destinationsData[dest]
      }));

      setTopOptions(formattedOptions);
    } catch (error) {
      console.error("There was an error submitting the form!", error);
    }
  };

  const handleDestinationChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSelectedDestination(e.target.value);
  };

  const fetchPlanAndImages = async () => {
    if (!selectedDestination) return;

    try {
      const planAndImagesResponse = await axios.get("http://localhost:8000/daily-plan-and-images", {
        params: {
          destination: selectedDestination,
          trip_type: formData.tripType,
          start_date: formData.startDate,
          end_date: formData.endDate
        }
      });
      const { plan, images } = planAndImagesResponse.data;
      setPlan(typeof plan === 'string' ? plan : '');
      setImages(images);
    } catch (error) {
      console.error("There was an error fetching the plan and images!", error);
    }
  };

  return (
    <>
      <Head>
        <title>trip planner AI</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <h1 className={styles.title}>Trip Planner</h1>
        <form onSubmit={handleSubmit} className={styles.form}>
          <label className={styles.formField}>
            Start Date:
            <input type="date" name="startDate" value={formData.startDate} min={today} onChange={handleChange} />
          </label>
          <label className={styles.formField}>
            End Date:
            <input type="date" name="endDate" value={formData.endDate} min={formData.startDate || today} onChange={handleChange} />
          </label>
          <label className={styles.formField}>
            Budget:
            <input type="number" name="budget" placeholder="Enter your budget" value={formData.budget} onChange={handleChange} />
          </label>
          <label className={styles.formField}>
            Trip Type:
            <select name="tripType" value={formData.tripType} onChange={handleChange}>
              <option value="">Select a trip type</option>
              <option value="ski">ski</option>
              <option value="beach">beach</option>
              <option value="city">city</option>
            </select>
          </label>
          <button type="submit">Submit</button>
        </form>

        {topOptions.length > 0 && (
          <div className={styles.topOptions}>
            <h2>Top 5 Options</h2>
            <table className={styles.table}>
              <thead>
                <tr>
                  <th>Select</th>
                  <th>Destination</th>
                  <th>Flights</th>
                  <th>Hotel</th>
                  <th>Total Cost</th>
                </tr>
              </thead>
              <tbody>
                {topOptions.map((option, index) => (
                  <tr key={index}>
                    <td>
                      <input
                        type="radio"
                        name="destination"
                        value={option.name}
                        checked={selectedDestination === option.name}
                        onChange={handleDestinationChange}
                      />
                    </td>
                    <td><strong>{option.name}</strong></td>
                    <td>
                      <details>
                        <summary>View Flights</summary>
                        <p><strong>Departure Flights:</strong></p>
                        {option.info["departures flight"]?.map((flight, i) => (
                          <div key={i}>
                            <p>Flight Number: {flight.flight_number} ({flight.airline})</p>
                            <p>Departure: {flight.departure_airport.name} ({flight.departure_airport.id}) at {flight.departure_airport.time}</p>
                            <p>Arrival: {flight.arrival_airport.name} ({flight.arrival_airport.id}) at {flight.arrival_airport.time}</p>
                            <p>Duration: {flight.duration} minutes</p>
                            <p>Class: {flight.travel_class}, Legroom: {flight.legroom}</p>
                            <p>Extensions: {Array.isArray(flight.extensions) ? flight.extensions.join(", ") : "None"}</p>
                          </div>
                      ))}
                      <p><strong>Return Flights:</strong></p>
                      {option.info["arrival flight"]?.map((flight, i) => (
                        <div key={i}>
                          <p>Flight Number: {flight.flight_number} ({flight.airline})</p>
                          <p>Departure: {flight.departure_airport.name} ({flight.departure_airport.id}) at {flight.departure_airport.time}</p>
                          <p>Arrival: {flight.arrival_airport.name} ({flight.arrival_airport.id}) at {flight.arrival_airport.time}</p>
                          <p>Duration: {flight.duration} minutes</p>
                          <p>Class: {flight.travel_class}, Legroom: {flight.legroom}</p>
                          <p>Extensions: {Array.isArray(flight.extensions) ? flight.extensions.join(", ") : "None"}</p>
                        </div>
                      ))}
                      </details>
                    </td>
                    <td>
                      <details>
                        <summary>View Hotel</summary>
                        <p><strong>{option.info.hotel.name}</strong></p>
                        <p>{option.info.hotel.description}</p>
                        <p>Rating: {option.info.hotel.rating}</p>
                        <p>Price: ${option.info.hotel.price}</p>
                        <p>Check-in: {option.info.hotel.check_in_time}, Check-out: {option.info.hotel.check_out_time}</p>
                        <p>Amenities: {option.info.hotel.amenities.join(", ")}</p>
                        <a href={option.info.hotel.link} target="_blank" rel="noopener noreferrer">More details</a>
                      </details>
                    </td>
                    <td>${option.info["total coast"]}</td>
                  </tr>
                ))}
              </tbody>
            </table>
            <button onClick={fetchPlanAndImages}>Get Plan and Images</button>
          </div>
        )}

        {plan && (
          <div className={styles.plan}>
            <h2>Daily Plan</h2>
            <p>{plan}</p>
          </div>
        )}
        
        {images.length > 0 && (
          <div className={styles.images}>
            <h2>Images</h2>
            <div className={styles.imageGallery}>
              {images.map((image, index) => (
                <img key={index} src={image} alt={`Plan Image ${index + 1}`} className={styles.image} />
              ))}
            </div>
          </div>
        )}
      </main>
    </>
  );
}
